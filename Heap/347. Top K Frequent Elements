class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        //create map of num[i]-> freq
        //insert into heap according to frequency
        //most freq, so higher freq should be popped out
        //max heap
        //check if >k? then pull out
        //1-3
        //2-2
        //3-1
        
        //3-1, 2-2, 1-3
        //1-3,2-2,3-1
        Map<Integer,Integer> mp=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(mp.containsKey(nums[i])){
                mp.put(nums[i],mp.get(nums[i])+1);
            }else{
                mp.put(nums[i],1);
            }
        }

        PriorityQueue<Data> minHeap=new PriorityQueue<>(new Comparator<Data>(){
            @Override
            public int compare(Data d1,Data d2){
                if(d1.f>d2.f){
                    return 1;
                }else if(d1.f<d2.f){
                    return -1;
                }
                return 0;
            }
        });

        for(Map.Entry<Integer,Integer> en:mp.entrySet()){
            Data d=new Data(en.getKey(),en.getValue());
            minHeap.add(d);
            if(minHeap.size()>k){
                minHeap.poll();
            }
        }

        int n=minHeap.size();
        int[] ans=new int[n];
        for(int i=0;i<n;i++){
            Data d1=minHeap.poll();
            ans[i]=d1.num;
        }
        return ans;
    }
}

class Data{
    int num;
    int f;
    Data(int num,int f){
        this.num=num;
        this.f=f;
    }
}
