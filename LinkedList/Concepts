1) Floydâ€™s Cycle detection algorithm :-

2 pointers slow_pointer and fast_pointer is initialized with the head. Slow moves one point and Fast moves at 2 points. The moment when both are equal, count nodes
from any of the pointer. That is the length of the loop.
Reference : https://www.geeksforgeeks.org/find-length-of-loop-in-linked-list/

2) Steps to remove a loop :
    
  - count number of nodes in the loop (suppose k)
  - fix one pointer to head
  - another pointer to k nodes after head
  - move both pointers and they will meet at starting of the loop
  - get pointer to the last node
  - set null to the node which is at the end of the loop

Reference : https://www.geeksforgeeks.org/detect-and-remove-loop-in-a-linked-list/

3) check if a linkedlist is palindrome :

Traverse the LL and insert each element in a stack. Traverse again, pop from stack each element and compare the currently visiting node. If all same then, palindrome.
Reference : https://www.geeksforgeeks.org/function-to-check-if-a-singly-linked-list-is-palindrome/

4) 
