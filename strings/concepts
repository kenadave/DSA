1) Program to check if input is an integer or a string : Character.isDigit()

2) Find Extra Character using XOR :
public class FindExtraChar {

	public static void main(String[] args) {
		String strA="abcde";
		int res=0;
		for (int i = 0; i < strA.length(); i++)
        {
            // xor with res
            res ^= strA.charAt(i);
        }
		String strB="abcdef";
		for (int i = 0; i < strB.length(); i++)
        {
            // xor with res
            res ^= strB.charAt(i);
        }
		System.out.println((char)res);
	}

}

3) Priority Queue comparision :-
PriorityQueue<Map.Entry<String, Integer>> heap = new PriorityQueue<>(
	            (a,b)->{
	                if(a.getValue() != b.getValue())
	                    return a.getValue().compareTo(b.getValue());
	                return a.getKey().compareTo(b.getKey());
	            }
	        );

4) Map of frequency of keys shortcut

for(String word: words){
	            map.merge(word, 1, Integer::sum);
	        }
		
If the specified key is not already associated with a value or isassociated with null, associates it with the given non-null value.Otherwise, replaces the associated value with the results of the givenremapping function, or removes if the result is null. Thismethod may be of use when combining multiple mapped values for a key.For example, to either create or append a String msg to avalue mapping: 
 map.merge(key, msg, String::concat)

If the remapping function returns null, the mapping is removed.If the remapping function itself throws an (unchecked) exception, theexception is rethrown, and the current mapping is left unchanged. 
		
		
5) Put in PQ and limit the entries :-

for(Map.Entry<String, Integer> entry: map.entrySet()){
	            heap.offer(entry);
	            if(heap.size() > k)
	                heap.poll();
	        }
		
6) Polynomial Rolling Hash :-

Sigma of s[i]*Math.pow(p,i) where i is from 0 to n-1. p can be any prime number >26
Hash Value increases exponentially, Integer value will be overflow. So to avoid this, modulo is used.
