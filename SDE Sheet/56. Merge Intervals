class Solution {
    public int[][] merge(int[][] intervals) {
        // count = end count=3 if start<count 
        List<Pair> lst=new ArrayList<Pair>();
        List<Pair> newLst=new ArrayList<Pair>();
        for(int[] i:intervals){
            Pair p=new Pair(i[0],i[1]);
            lst.add(p);
        }
        Collections.sort(lst,(p1,p2)->p1.start-p2.start);
        newLst.add(new Pair(lst.get(0).start,lst.get(0).end));
        for(int i=1;i<lst.size();i++){
            Pair prev=lst.get(i-1);
            Pair thisPair=lst.get(i);
            if(thisPair.start<=prev.end){
                int newEnd=Math.max(prev.end,lst.get(i).end);
                thisPair.end=newEnd;
                thisPair.start=prev.start;
                System.out.println(thisPair);
                if(newLst.size()>=1){
                    newLst.remove(new Pair(prev.start,prev.end));
                }
            }
            newLst.add(new Pair(thisPair.start,thisPair.end));
        }
        
        int m=intervals.length;
        int n=intervals[0].length;
        int[][] ans=new int[newLst.size()][2];
        for(int i=0;i<newLst.size();i++){
            ans[i][0]=newLst.get(i).start;
            ans[i][1]=newLst.get(i).end;
        }
        return ans;
    }
}

class Pair{
    int start;
    int end;
    Pair(int start,int end){
        this.start=start;
        this.end=end;
    }

    @Override
    public boolean equals(Object o){
        Pair p=(Pair)o;
        if(p.start==this.start&&p.end==this.end){
            return true;
        }else{
            return false;
        }
    }
    // @Override
    // public int compare(Object o1,Object o2){
    //     o1=(int)o1;
    //     o2=(int)o2;
    //     if(o1>o2){
    //         return 1;
    //     }
    //     else if(o1<o2){
    //         return -1;
    //     }else{
    //         return 0;
    //     }
    // }

    @Override
    public String toString(){
        return "start:"+this.start+"end:"+this.end;
    }
}
