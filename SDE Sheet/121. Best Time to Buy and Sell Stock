class Solution {
    public int maxProfit(int[] prices) {
        // int profit=0;
        // int lowestIndex=0;
        // profit=getMaxProfit(prices,profit,lowestIndex);
        // // int difference=0;
        // // for(int i=0;i<prices.length;i++){
        // //     for(int j=i;j<prices.length;j++){
        // //         if(prices[i]<prices[j]){
        // //             difference=Math.max((prices[j]-prices[i]),difference);
        // //             // if((prices[j]-prices[i])>difference){
        // //             //     difference=(prices[j]-prices[i]);
        // //             // }
        // //         }
        // //     }
        // // }
        // // return difference;
        // return profit;
        int buy=Integer.MAX_VALUE,sell=0;
        for(int i=0;i<prices.length;i++){
            buy=Math.min(buy,prices[i]);
            sell=Math.max(sell,prices[i]-buy);
        }
        return sell;
    }
//     private int getMaxProfit(int[] prices,int profit,int lowestIndex){
//         if(lowestIndex>0){
//             prices=new int[prices.length-1];
//             for(int p=0;p<prices.length;p++){
//                 if(p!=lowestIndex){
//                     prices[p]=prices[p];
//                 }
//         }
//         }
//         for(int p=0;p<prices.length;p++){
//             if(prices[p]<prices[lowestIndex]){
//                 lowestIndex=p;
//             }
//         }
//         int largestIndex=lowestIndex;
//         System.out.println(lowestIndex);
//         if((lowestIndex+1)>(prices.length-1))
//             return 0;
//         for(int l=(lowestIndex+1);l<prices.length;l++){
//             System.out.println(l);
//             if(prices[largestIndex]<prices[l]){
//                 largestIndex=l;
//             }
//         }
//         System.out.println(largestIndex);
//         profit=prices[largestIndex]-prices[lowestIndex];
//         if(profit==0){
//             profit=getMaxProfit(prices,profit,lowestIndex);
//         }
            
//         return profit;
//     }
}
